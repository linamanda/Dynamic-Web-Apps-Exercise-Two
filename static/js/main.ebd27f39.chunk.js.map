{"version":3,"sources":["components/WeatherImage.js","components/WeatherCard.js","containers/Home.js","components/API_KEY.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherImage","weatherType","icon","faCloud","faSun","faCloudRain","faSnowflake","faCoffee","WeatherCard","cloudiness","currentTemp","highTemp","humidity","lowTemp","tempUnit","windSpeed","className","style","backgroundColor","Home","useState","city","setCity","undefined","weatherData","setWeatherData","query","URLSearchParams","useLocation","search","URL","useEffect","cityValue","get","axios","then","response","data","catch","error","useMemo","clouds","all","Math","round","main","temp","temp_max","temp_min","weather","wind","speed","href","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebd27f39.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCoffee,\r\n  faCloud,\r\n  faCloudRain,\r\n  faSun,\r\n  faSnowflake,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction WeatherImage({ weatherType }) {\r\n  switch (weatherType) {\r\n    case \"Clouds\":\r\n      return <FontAwesomeIcon icon={faCloud} />;\r\n    case \"Clear\":\r\n      return <FontAwesomeIcon icon={faSun} />;\r\n    case \"Rain\" | \"Thunderstorm\":\r\n      return <FontAwesomeIcon icon={faCloudRain} />;\r\n    case \"Snow\":\r\n      return <FontAwesomeIcon icon={faSnowflake} />;\r\n    default:\r\n      return <FontAwesomeIcon icon={faCoffee} />;\r\n  }\r\n}\r\n\r\nexport default WeatherImage;\r\n","import React from \"react\";\r\nimport WeatherImage from \"./WeatherImage.js\";\r\n\r\nfunction WeatherCard({\r\n  cloudiness,\r\n  currentTemp,\r\n  highTemp,\r\n  humidity,\r\n  lowTemp,\r\n  tempUnit,\r\n  weatherType = \"Unknown\",\r\n  windSpeed,\r\n}) {\r\n  return (\r\n    <section\r\n      className=\"WeatherCard\"\r\n      style={{\r\n        backgroundColor: `rgba(150, 150, 150, ${cloudiness / 100})`,\r\n      }}\r\n    >\r\n      <div className=\"WeatherTempWrapper\">\r\n        <p className=\"CurrentTemp\">\r\n          <strong>\r\n            {currentTemp}\r\n            {tempUnit}\r\n          </strong>\r\n        </p>\r\n        <p className=\"HighTemp\">\r\n          <strong>High: {highTemp}</strong>\r\n        </p>\r\n        <p className=\"LowTemp\">\r\n          <strong>Low: {lowTemp}</strong>\r\n        </p>\r\n      </div>\r\n      <div className=\"WeatherTypeWrapper\">\r\n        <div className=\"WeatherImageWrapper\">\r\n          <WeatherImage weatherType={weatherType} />\r\n        </div>\r\n        <p>\r\n          WeatherType: <strong>{weatherType}</strong>\r\n        </p>\r\n      </div>\r\n      <div className=\"WeatherAtmosWrapper\">\r\n        <p className=\"Humidity\">\r\n          Humidity: <strong>{humidity}%</strong>\r\n        </p>\r\n        <p className=\"WindSpeed\">\r\n          WindSpeed: <strong>{windSpeed}</strong>\r\n        </p>\r\n        <p className=\"Cloudiness\">\r\n          Cloudiness: <strong>{cloudiness}%</strong>\r\n        </p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\"; // For making HTTP requests\r\nimport WeatherCard from \"../components/WeatherCard\";\r\nimport { API_KEY } from \"../components/API_KEY\";\r\n\r\n// URL search params ---> localhost:3000/?city=paris\r\n// Abstract away URL Search params to make it easier to use\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Home() {\r\n  const [city, setCity] = useState();\r\n  const [weatherData, setWeatherData] = useState(undefined);\r\n  let query = useQuery();\r\n  let tempUnit = `imperial`;\r\n  let tempUnitStr = `\\u00B0F`;\r\n\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=${tempUnit}`;\r\n\r\n  useEffect(() => {\r\n    const cityValue = query.get(\"city\");\r\n    setCity(cityValue);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    // Get weather data from Weather API\r\n    if (city) {\r\n      axios\r\n        .get(URL)\r\n        .then(function (response) {\r\n          // successful request --- set as weather data\r\n          setWeatherData(response.data);\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n        });\r\n    }\r\n  }, [URL, city]);\r\n\r\n  const {\r\n    cloudiness,\r\n    currentTemp,\r\n    highTemp,\r\n    humidity,\r\n    lowTemp,\r\n    weatherType,\r\n    windSpeed,\r\n  } = useMemo(() => {\r\n    if (!weatherData) return {};\r\n    return {\r\n      cloudiness: weatherData.clouds.all,\r\n      currentTemp: Math.round(weatherData.main.temp),\r\n      highTemp: Math.round(weatherData.main.temp_max),\r\n      humidity: weatherData.main.humidity,\r\n      lowTemp: Math.round(weatherData.main.temp_min),\r\n      weatherType: weatherData.weather[0].main,\r\n      windSpeed: weatherData.wind.speed + ` mph`,\r\n    };\r\n  }, [weatherData]);\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <header className=\"NavigationWrapper\">\r\n        <nav className=\"Navigation\">\r\n          <a href=\"/\" className=\"logo\">\r\n            WeatherNow\r\n          </a>\r\n          <a href=\"/?city=paris\" className={city === \"paris\" && \"Active\"}>\r\n            Paris\r\n          </a>\r\n          <a href=\"/?city=tokyo\" className={city === \"tokyo\" && \"Active\"}>\r\n            Tokyo\r\n          </a>\r\n          <a href=\"/?city=seoul\" className={city === \"seoul\" && \"Active\"}>\r\n            Seoul\r\n          </a>\r\n          <a href=\"/?city=seattle\" className={city === \"seattle\" && \"Active\"}>\r\n            Seattle\r\n          </a>\r\n        </nav>\r\n      </header>\r\n\r\n      <h1 className=\"City\"> {city} </h1>\r\n\r\n      {(city && (\r\n        <WeatherCard\r\n          cloudiness={cloudiness}\r\n          currentTemp={currentTemp}\r\n          highTemp={highTemp}\r\n          humidity={humidity}\r\n          lowTemp={lowTemp}\r\n          tempUnit={tempUnitStr}\r\n          weatherType={weatherType}\r\n          windSpeed={windSpeed}\r\n        />\r\n      )) || (\r\n        <section className=\"MainContentWrapper\">\r\n          <p>Select a city to view the current weather.</p>\r\n        </section>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","export const API_KEY = `73a346ccffc92d26fdc0be25725b3827`;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}